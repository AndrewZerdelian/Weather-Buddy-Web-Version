import { Inter } from "next/font/google";
import "./globals.css";
import GeoLocationContext from "./Context/GeoLocationContext";
import CurrentWeatherContext from "./Context/CurrentWeatherContext";
import AirPollutionContext from "./Context/AirPollutionContext";
import WeeklyWeatherContextT from "./Context/WeeklyWeatherContext";
import WeeklyRequestByCityName from "./Context/WeeklyRequestByCityName";
import NavBar from "./Components/NavBar/NavBar";
import Footer from "./Components/Footer/Footer";

const inter = Inter({ subsets: ["latin"] });

export const metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body className={inter.className}>
        <GeoLocationContext>
          <CurrentWeatherContext>
            <AirPollutionContext>
              <WeeklyWeatherContextT>
                <WeeklyRequestByCityName>
                  <NavBar />
                  {children}
                  <Footer />
                </WeeklyRequestByCityName>
              </WeeklyWeatherContextT>
            </AirPollutionContext>
          </CurrentWeatherContext>
        </GeoLocationContext>
      </body>
    </html>
  );
}
//bg-[#111013]
// <body className={inter.className}>

/** NEW MAIN STRUCTURE 
 * 
 *     <div>
      {WeatherData?.main ? (
        <div>
          <div className="bg-[#111013] h-vh grid grid-cols-12 text-white font-extrabold px-5 ">
            <div className="col-span-12 md:col-span-3 mt-8 md:mr-5 px-6 bg-[#1C1C1E] pt-5 rounded-2xl">
              <p className="pt-5">Current Weather</p>
              <div className="text-5xl flex justify-between pt-5">
                <div className="flex">
                  {WeatherData?.main?.temp?.toFixed(0)}
                  <TbTemperatureCelsius />
                </div>
                <img
                  className="flex justify-end items-end text-end"
                  src={
                    WeatherData?.weather ? (
                      `https://openweathermap.org/img/wn/${WeatherData?.weather[0]?.icon}@2x.png`
                    ) : (
                      <span>Loading..</span>
                    )
                  }
                  alt="Weather icon"
                />
              </div>
              <div className="flex justify-end"></div>
              {WeatherData?.weather && (
                <p>{WeatherData?.weather[0]?.description}</p>
              )}

              <div className="border-b pt-5"></div>

              <h1 className="text-1xl text-start flex items-center gap-5 pt-5">
                <MdOutlineLocationOn />
                {WeatherData?.name} / {WeatherData?.sys?.country}
              </h1>
            </div>
            <div className="col-span-12 md:col-span-9 mt-8 px-6 bg-[#1C1C1E] pt-5 rounded-2xl">
              <h1 className="text-2xl ">Todays HighLight</h1>
              <div className="grid md:grid-cols-12 gap-5 pt-5">
                <div className="col-span-6 pl-6 bg-[#1A191C] py-5 rounded-2xl">
                  <span>Air Quality Index</span>
                  {AirPollution ? (
                    <div>
                      {AirPollution?.data?.list?.map((Air, index) => {
                        return (
                          <div key={index} className="grid grid-cols-10 pt-3">
                            <div className="col-span-2 grid justify-center items-center">
                              <FiWind className="text-4xl " />
                            </div>
                            <div className="col-span-2">
                              <h5>PM2.5</h5>
                              <p>{Air?.components?.pm2_5.toFixed(1)}</p>
                            </div>
                            <div className="col-span-2">
                              <h5>NO2</h5>
                              <p>{Air?.components?.no2.toFixed(1)}</p>
                            </div>
                            <div className="col-span-2">
                              <h5>CO</h5>
                              <p>{Air?.components?.co.toFixed(0)}</p>
                            </div>
                            <div className="col-span-2">
                              <h5>O3</h5>
                              <p>{Air?.components?.o3.toFixed(1)}</p>
                            </div>
                          </div>
                        );
                      })}
                    </div>
                  ) : (
                    <p>Loading</p>
                  )}
                </div>
                <div className="col-span-6 pl-6 bg-[#1A191C] py-5 rounded-2xl">
                  <span> Sunrise & Sunset</span>
                  <div className="grid grid-cols-6 justify-between">
                    <div className="col-span-3">
                      Sunrise
                      <div className="text-3xl flex gap-5">
                        <FiSunrise />
                        {SunRise.toString()}
                      </div>
                    </div>
                    <div className="col-span-3">
                      <span>Sunset</span>
                      <div className="text-3xl flex gap-5">
                        <FiSunset />
                        {SunSets.toString()}
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div className="grid md:grid-cols-12 pt-5 gap-5 ">
                <div className="col-span-3 bg-[#1A191C]  pl-6 rounded-2xl py-5">
                  Humidity
                  <div className="text-3xl flex gap-5 pt-5">
                    <WiHumidity className="" />
                    <div className="flex items-end">
                      {WeatherData?.main?.humidity}
                      <span className="text-xl">%</span>
                    </div>
                  </div>
                </div>
                <div className="col-span-3 bg-[#1A191C] pl-6 rounded-2xl py-5">
                  Wind
                  <div className="text-3xl flex gap-5 pt-5">
                    <WiWindy />
                    <div>
                      {WeatherData?.wind?.speed.toFixed(1)}
                      <span className="text-xl">k/h</span>
                    </div>
                  </div>
                </div>
                <div className="col-span-3 bg-[#1A191C] pl-6 rounded-2xl py-5">
                  Visibility
                  <div className="text-3xl flex gap-5 pt-5">
                    <MdOutlineVisibility />
                    <div>
                      {`${WeatherData?.visibility
                        ?.toString()
                        ?.slice(0, -3)}.${WeatherData?.visibility
                        ?.toString()
                        ?.slice(-3, -2)}`}
                      <span className="text-xl">KM</span>
                    </div>
                  </div>
                </div>
                <div className="col-span-3 bg-[#1A191C] pl-6 rounded-2xl py-5">
                  Feels Like
                  <div className="text-3xl flex gap-5 pt-5">
                    <FaTemperatureHigh />
                    <div className="flex items-end">
                      {WeatherData?.main?.feels_like.toFixed(1)}
                      <span className="text-1xl ">
                        <TbTemperatureCelsius />
                      </span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div className="col-span-12 md:col-span-3 mt-8 md:mr-5 px-6 bg-[#1C1C1E] pt-5 rounded-2xl">
              <p className="text-bold ">Weekly Forecast</p>
              <div>
                {rearrangedData.map((weeklyWeather, index) => (
                  <Link
                    href="#"
                    key={index}
                    className="grid grid-cols-3 text-center items-center hover:bg-[#1A191C] rounded-2xl"
                  >
                    <p className="col-span-1">{weeklyWeather.dayOfWeek}</p>
                    <img
                      className="col-span-1"
                      src={`https://openweathermap.org/img/wn/${weeklyWeather?.entries[0]?.weather[0]?.icon}@2x.png`}
                      alt="Weather Icon"
                    />
                    <p className="col-span-1">
                      {weeklyWeather.max_temp.toFixed(0)}/
                      {weeklyWeather.min_temp.toFixed(0)}
                    </p>
                  </Link>
                ))}
              </div>
            </div>
            <div className="col-span-12 md:col-span-9 mt-8 px-5 pt-5 rounded-2xl bg-[#1C1C1E]">
              <h1 className="text-2xl">Todays Details</h1>
              <div className="grid md:grid-cols-8 grid-cols-1 justify-center items-start pt-5 gap-5">
                {FiveDaysForCast?.data?.list
                  ?.slice(0, 8)
                  .map((Weekly, index) => {
                    // Format the time to AM/PM
                    const formattedTime = new Date(
                      Weekly.dt_txt
                    ).toLocaleString("en-US", {
                      hour: "numeric",
                      hour12: true,
                    });
                    return (
                      <div
                        className="col-span-1 text-center bg-[#1A191C] rounded-2xl py-5" // Center the card
                        key={index}
                      >
                        <div className="grid grid-cols-3 md:grid-cols-1 text-center items-center">
                          <p className="col-span-1">{formattedTime}</p>
                          <p className="col-span-1 hidden md:block">
                            {Weekly?.weather[0]?.main}
                          </p>
                          <img
                            src={`https://openweathermap.org/img/wn/${Weekly?.weather[0]?.icon}@2x.png`}
                            className="mx-auto col-span-1" // Center the image
                          />
                          <div className="flex justify-center items-end col-span-1">
                            {Weekly?.main?.temp.toFixed(0)}
                            <TbTemperatureCelsius />
                          </div>
                        </div>
                      </div>
                    );
                  })}
              </div>
            </div>
          </div>
        </div>
      ) : (
        <div className="bg-[#111013] h-svh text-white font-extrabold px-5 ">
          <Player
            autoplay
            loop
            src="https://lottie.host/f2d3d837-cfec-406b-bc2a-a1498bd9acf7/qOBTAEHtYP.json"
            style={{ height: "300px", width: "300px" }}
          >
            <Controls
              visible={false}
              buttons={["play", "repeat", "frame", "debug"]}
            />
          </Player>
        </div>
      )}
    </div>
*/

//  console.log(FiveDaysForCast?.data?.list);
/**
 * // Assuming FiveDaysForCast is your API response
const originalList = FiveDaysForCast?.data?.list;

// Group data by days and calculate max_temp/min_temp for each day
const rearrangedData = [];
for (let i = 0; i < originalList?.length; i += 8) {
  const dayData = originalList?.slice(i, i + 8);

  // Calculate max_temp and min_temp for the day
  const maxTemp = Math.max(...dayData.map(item => item.main.temp_max));
  const minTemp = Math.min(...dayData.map(item => item.main.temp_min));

  // Create a new object for the day
  const dayObject = {
    date: dayData[0].dt_txt, // You might want to format the date as needed
    max_temp: maxTemp,
    min_temp: minTemp,
    entries: dayData, // Include the original entries for the day if needed
  };

  rearrangedData.push(dayObject);
}

// Now, rearrangedData contains the data grouped by days with max_temp/min_temp
console.log(rearrangedData);

 */

/**
 *   const fiveDaysForecast = FiveDaysForCast?.data?.list;

  let weeklyData = [];

  if (fiveDaysForecast) {
    const dailyData = fiveDaysForecast.reduce((acc, item) => {
      const dateText = item?.dt_txt;
      const date = dateText ? dateText.split(" ")[0] : null;

      if (date) {
        if (!acc[date]) {
          acc[date] = { data: [], totalTemp: 0, count: 0 };
        }

        acc[date].data.push(item);
        acc[date].totalTemp += item.main.temp;
        acc[date].count++;
      }

      return acc;
    }, {});

    weeklyData = Object.keys(dailyData).map((date) => {
      const averageTemp = dailyData[date].totalTemp / dailyData[date].count;
      const dateObj = new Date(date);
      const dayOfWeek = dateObj.toLocaleString("en-US", { weekday: "long" });

      return {
        date,
        averageTemp,
        dayOfWeek,
        data: dailyData[date].data.map((item) => ({
          ...item,
          averageTemp,
          dayOfWeek,
        })),
      };
    });

    console.log(weeklyData);
  }
 */

/** if i want to show the day weather news only 
 
 *   const Todays_Details = FiveDaysForCast?.data?.list?.filter(
    (entry) =>
      entry?.dt_txt?.split(" ")[0] === new Date().toISOString().split("T")[0]
  );

                <div className="grid grid-cols-12">
                {Todays_Details?.map((entry, index) => {
                  // Convert the time to 12-hour format with AM/PM
                  const time = new Date(entry?.dt_txt).toLocaleString("en-US", {
                    hour: "numeric",
                    hour12: true,
                  });

                  return (
                    <div className="col-span-4 justify-center" key={index}>
                      
                      <div >
                        <p>{time}</p>
                        <p>
                          {entry?.main?.temp?.toFixed(0)}{" "}
                          <span className="text-1xl ">
                            <TbTemperatureCelsius />
                          </span>
                        </p>
                      </div>
                      
                    </div>
                  );
                })}
              </div>
 */

/**  how to change time to am and pm 
 *       setSunRise(
        new Date(TodayWeather?.data?.sys?.sunrise * 1000).toLocaleTimeString(
          [],
          { hour: "2-digit", minute: "2-digit" }
        )
      );
      setSunSets(
        new Date(TodayWeather?.data?.sys?.sunset * 1000).toLocaleTimeString(
          [],
          { hour: "2-digit", minute: "2-digit" }
        )
      );
 */

/**   
 *   console.log(
    FiveDaysForCast?.data?.list.filter((entry) => {
      const currentDate = new Date(); // Current date and time
      const formattedCurrentDate = currentDate.toISOString().split('T')[0]; // Extracting date
  
      // Assuming the date in the API response is stored in the 'dt_txt' property
      const entryDate = entry.dt_txt.split(' ')[0]; // Extracting date from dt_txt
  
      return entryDate === formattedCurrentDate; // Compare dates
    })
  );
 */

/**
 *   console.log(
    FiveDaysForCast?.data?.list?.filter(
      (entry) =>
        entry?.dt_txt?.split(" ")[0] === new Date().toISOString().split("T")[0]
    )
  );
 */
